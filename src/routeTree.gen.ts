/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ContactImport } from './routes/contact'
import { Route as IndexImport } from './routes/index'
import { Route as AboutIndexImport } from './routes/about/index'
import { Route as AboutCategoryCategoryImport } from './routes/about/category/$category'
import { Route as AboutCategoryCategoryItemIdImport } from './routes/about/category/$category/item/$id'

// Create/Update Routes

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AboutIndexRoute = AboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any)

const AboutCategoryCategoryRoute = AboutCategoryCategoryImport.update({
  id: '/about/category/$category',
  path: '/about/category/$category',
  getParentRoute: () => rootRoute,
} as any)

const AboutCategoryCategoryItemIdRoute =
  AboutCategoryCategoryItemIdImport.update({
    id: '/item/$id',
    path: '/item/$id',
    getParentRoute: () => AboutCategoryCategoryRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexImport
      parentRoute: typeof rootRoute
    }
    '/about/category/$category': {
      id: '/about/category/$category'
      path: '/about/category/$category'
      fullPath: '/about/category/$category'
      preLoaderRoute: typeof AboutCategoryCategoryImport
      parentRoute: typeof rootRoute
    }
    '/about/category/$category/item/$id': {
      id: '/about/category/$category/item/$id'
      path: '/item/$id'
      fullPath: '/about/category/$category/item/$id'
      preLoaderRoute: typeof AboutCategoryCategoryItemIdImport
      parentRoute: typeof AboutCategoryCategoryImport
    }
  }
}

// Create and export the route tree

interface AboutCategoryCategoryRouteChildren {
  AboutCategoryCategoryItemIdRoute: typeof AboutCategoryCategoryItemIdRoute
}

const AboutCategoryCategoryRouteChildren: AboutCategoryCategoryRouteChildren = {
  AboutCategoryCategoryItemIdRoute: AboutCategoryCategoryItemIdRoute,
}

const AboutCategoryCategoryRouteWithChildren =
  AboutCategoryCategoryRoute._addFileChildren(
    AboutCategoryCategoryRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/about': typeof AboutIndexRoute
  '/about/category/$category': typeof AboutCategoryCategoryRouteWithChildren
  '/about/category/$category/item/$id': typeof AboutCategoryCategoryItemIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/about': typeof AboutIndexRoute
  '/about/category/$category': typeof AboutCategoryCategoryRouteWithChildren
  '/about/category/$category/item/$id': typeof AboutCategoryCategoryItemIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/about/': typeof AboutIndexRoute
  '/about/category/$category': typeof AboutCategoryCategoryRouteWithChildren
  '/about/category/$category/item/$id': typeof AboutCategoryCategoryItemIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contact'
    | '/about'
    | '/about/category/$category'
    | '/about/category/$category/item/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/contact'
    | '/about'
    | '/about/category/$category'
    | '/about/category/$category/item/$id'
  id:
    | '__root__'
    | '/'
    | '/contact'
    | '/about/'
    | '/about/category/$category'
    | '/about/category/$category/item/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContactRoute: typeof ContactRoute
  AboutIndexRoute: typeof AboutIndexRoute
  AboutCategoryCategoryRoute: typeof AboutCategoryCategoryRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactRoute: ContactRoute,
  AboutIndexRoute: AboutIndexRoute,
  AboutCategoryCategoryRoute: AboutCategoryCategoryRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/contact",
        "/about/",
        "/about/category/$category"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/about/": {
      "filePath": "about/index.tsx"
    },
    "/about/category/$category": {
      "filePath": "about/category/$category.tsx",
      "children": [
        "/about/category/$category/item/$id"
      ]
    },
    "/about/category/$category/item/$id": {
      "filePath": "about/category/$category/item/$id.tsx",
      "parent": "/about/category/$category"
    }
  }
}
ROUTE_MANIFEST_END */
